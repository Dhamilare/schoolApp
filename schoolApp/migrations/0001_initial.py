# Generated by Django 5.2.3 on 2025-06-27 12:11

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SchoolProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the school.', max_length=255)),
                ('address', models.TextField(blank=True, help_text='Physical address of the school.')),
                ('phone_number', models.CharField(blank=True, help_text="School's contact phone number.", max_length=20)),
                ('email', models.EmailField(blank=True, help_text="School's official email address.", max_length=254)),
                ('motto', models.CharField(blank=True, help_text='School motto or slogan.', max_length=255)),
                ('logo', models.ImageField(blank=True, help_text='Upload the school logo.', null=True, upload_to='school_logos/')),
            ],
            options={
                'verbose_name': 'School Profile',
                'verbose_name_plural': 'School Profiles',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the subject (e.g., Mathematics, English).', max_length=100, unique=True)),
                ('code', models.CharField(blank=True, help_text='Optional short code for the subject.', max_length=10, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Subject',
                'verbose_name_plural': 'Subjects',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_teacher', models.BooleanField(default=False, help_text='Designates whether this user is a teacher.')),
                ('is_parent', models.BooleanField(default=False, help_text='Designates whether this user is a parent.')),
                ('is_admin', models.BooleanField(default=False, help_text='Designates whether this user is an administrator.')),
                ('profile_picture', models.ImageField(blank=True, help_text='Upload a profile picture for the user.', null=True, upload_to='profile_pics/')),
                ('phone_number', models.CharField(blank=True, help_text="User's contact phone number.", max_length=20, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('staff_id', models.CharField(blank=True, help_text='Unique staff identification number.', max_length=50, null=True, unique=True)),
                ('date_employed', models.DateField(blank=True, help_text='Date the teacher was employed.', null=True)),
                ('subjects_taught', models.ManyToManyField(blank=True, help_text='Subjects this teacher is qualified to teach.', related_name='teachers', to='schoolApp.subject')),
                ('user', models.OneToOneField(help_text='The user account for this teacher.', limit_choices_to={'is_teacher': True}, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Teacher',
                'verbose_name_plural': 'Teachers',
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the class (e.g., Grade 10A, JSS3).', max_length=100, unique=True)),
                ('class_teacher', models.OneToOneField(blank=True, help_text='The teacher assigned as the class teacher for this class.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_class', to='schoolApp.teacher')),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text="Student's first name.", max_length=100)),
                ('last_name', models.CharField(help_text="Student's last name.", max_length=100)),
                ('student_id', models.CharField(blank=True, help_text='Unique student identification number.', max_length=50, null=True, unique=True)),
                ('date_of_birth', models.DateField(help_text="Student's date of birth.")),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], default='Male', help_text="Student's gender.", max_length=10)),
                ('admission_date', models.DateField(auto_now_add=True, help_text='Date the student was admitted to the school.')),
                ('current_class', models.ForeignKey(blank=True, help_text='The current class the student is enrolled in.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='schoolApp.class')),
                ('parent', models.ForeignKey(blank=True, help_text="The parent associated with this student's account.", limit_choices_to={'is_parent': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student',
                'verbose_name_plural': 'Students',
                'ordering': ['current_class__name', 'last_name', 'first_name'],
                'unique_together': {('first_name', 'last_name', 'date_of_birth')},
            },
        ),
    ]
