# Generated by Django 5.2.3 on 2025-06-27 12:51

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('schoolApp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Name of the term (e.g., 'First Term', '2024/2025 Academic Session').", max_length=100, unique=True)),
                ('start_date', models.DateField(help_text='Start date of the term.')),
                ('end_date', models.DateField(help_text='End date of the term.')),
                ('is_current', models.BooleanField(default=False, help_text='Designates if this is the currently active term.')),
            ],
            options={
                'verbose_name': 'Academic Term',
                'verbose_name_plural': 'Academic Terms',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Assignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="Title of the assignment or exam (e.g., 'Mid-term Test', 'Homework 1').", max_length=255)),
                ('max_score', models.PositiveIntegerField(default=100, help_text='Maximum possible score for this assignment.')),
                ('date_given', models.DateField(auto_now_add=True, help_text='Date the assignment was created/given.')),
                ('due_date', models.DateField(blank=True, help_text='Optional due date for the assignment.', null=True)),
                ('_class', models.ForeignKey(help_text='The class for which this assignment is given.', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='schoolApp.class')),
                ('recorded_by', models.ForeignKey(blank=True, help_text='The teacher who recorded this assignment.', limit_choices_to={'is_teacher': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('subject', models.ForeignKey(help_text='The subject this assignment belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='schoolApp.subject')),
                ('term', models.ForeignKey(help_text='The academic term this assignment falls under.', on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='schoolApp.term')),
            ],
            options={
                'verbose_name': 'Assignment/Exam',
                'verbose_name_plural': 'Assignments/Exams',
                'ordering': ['-date_given', 'title'],
                'unique_together': {('title', 'subject', '_class', 'term')},
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_achieved', models.DecimalField(decimal_places=2, help_text='The score obtained by the student.', max_digits=5)),
                ('date_recorded', models.DateTimeField(auto_now_add=True, help_text='Date and time when the score was recorded.')),
                ('assignment', models.ForeignKey(help_text='The assignment for which this score is recorded.', on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='schoolApp.assignment')),
                ('recorded_by', models.ForeignKey(blank=True, help_text='The teacher who recorded this score.', limit_choices_to={'is_teacher': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('student', models.ForeignKey(help_text='The student who received this score.', on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='schoolApp.student')),
            ],
            options={
                'verbose_name': 'Score',
                'verbose_name_plural': 'Scores',
                'ordering': ['assignment__term__start_date', 'assignment__subject__name', 'student__last_name'],
                'unique_together': {('student', 'assignment')},
            },
        ),
    ]
